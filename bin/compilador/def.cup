package compilador;

import java.io.*;
import java_cup.runtime.*;
import compilador.Lexico;
import objetos.*;
import java.util.ArrayList;

parser code
{:
    private TabelaSimbolos tb = new TabelaSimbolos();
    
    public void syntax_error(Symbol s){
        String strErro = "Erro de sintaxe. Linha: " + (s.right + 1) +
            " Coluna: " + s.left + ". Texto: \"" + s.value + "\"" + " \n Token Encontrado: " + sym.terminalNames[s.sym] + " state " + s.parse_state;
        
        report_error(strErro, null); 
    }
    
    public TabelaSimbolos getTb() {
    	return this.tb;
	}
:};

terminal PROGRAM      , IF     , TRUE   , FALSE  , FLT    , INT      , BOL, 
         STR		  , STRING , VOID   , PUBLIC , PRIVATE, PROTECTED, 
         RETURN       , AP     , FP     , AC     , FC     , ASP      , 
         PONTO_VIRGULA, PONTO  , VIRGULA, ARRAY  , SOMA   , SUB      , 
         MULT         , DIV    , ATT    , IGUAL  , DIF    , MAIORQ   , 
         MENORQ       , MAIORI , MENORI , NAO    , E      , OU       , 
         ID           , CONST  , FLUT   , ERRO   , WS;

non terminal PROGRAMA_ESCOPO;
non terminal Programa PROGRAMA;
non terminal TIPO;
non terminal ArrayList<Var> LISTA_VAR;
non terminal Var VAR;
non terminal IDENTIFICADOR;
non terminal Atribuicao ATRIBUICAO;
non terminal TERMO;
non terminal PARAMETRO;
non terminal OPERADOR_ARIT;
non terminal OPERADOR_BOOL;
non terminal Expressao EXPRESSAO;
non terminal SCOPE;
non terminal Funcao FUNCAO;
non terminal CALL_FUNC;
non terminal ESTRUTURA;
non terminal SELECAO;
non terminal ABRE_BLOCO;
non terminal Bloco BLOCO;
non terminal TIPO_RETORNO;
non terminal RETORNO;

PROGRAMA ::= PROGRAMA_ESCOPO ID:id AP LISTA_VAR:listaVar FP AC BLOCO:bloco FC
			{: 	RESULT = new Programa(id, listaVar, bloco); :};

PROGRAMA_ESCOPO ::= PROGRAM {: getTb().novoEscopo(); :};

TIPO ::= STR:tipo {: RESULT = tipo; :}
		|INT:tipo {: RESULT = tipo; :}
		|FLT:tipo {: RESULT = tipo; :}
		|BOL:tipo {: RESULT = tipo; :};

LISTA_VAR ::= LISTA_VAR:listaVar VIRGULA VAR:var {: listaVar.add(var); RESULT = listaVar; :}
			| VAR:v {: RESULT = new ArrayList<Var>(); RESULT.add(v); :}
			| 
			;

VAR ::= TIPO:tipo ID:id 
	{: RESULT = new Var(id, tipo); getTb().novoSimbolo(id, tipo); :};

IDENTIFICADOR ::= ID:id {: getTb().verificaUsaSimbolo(id); RESULT = id; :};

TERMO ::= STRING:termo 					{: RESULT = termo;:}
		| TRUE:termo 					{: RESULT = termo;:}
		| FALSE:termo 					{: RESULT = termo;:}
		| IDENTIFICADOR:termo 			{: RESULT = termo;:}
		| NAO:nao IDENTIFICADOR:termo 	{: RESULT = termo;:}
		| CONST:termo 					{: RESULT = termo;:}
		| FLUT:termo 					{: RESULT = termo;:};

PARAMETRO ::= TERMO 
			| TERMO VIRGULA PARAMETRO
			| ;

OPERADOR_ARIT ::= SOMA:op {: RESULT = op; :} 
				| SUB:op  {: RESULT = op; :} 
				| MULT:op {: RESULT = op; :} 
				| DIV:op  {: RESULT = op; :};

OPERADOR_BOOL ::= MAIORQ:op {: RESULT = op; :} 
				| MENORQ:op {: RESULT = op; :} 
				| MAIORI:op {: RESULT = op; :} 
				| MENORI:op {: RESULT = op; :} 
				| IGUAL:op 	{: RESULT = op; :}
				| DIF:op 	{: RESULT = op; :}
				| E:op 		{: RESULT = op; :}
				| OU:op 	{: RESULT = op; :};

EXPRESSAO ::= TERMO:termo {: RESULT = new Expressao(termo); :}
			| TERMO:termo OPERADOR_ARIT:op EXPRESSAO:exp {: RESULT = new Expressao(termo, op, exp); :}
			| TERMO:termo OPERADOR_BOOL:op EXPRESSAO:exp {: RESULT = new Expressao(termo, op, exp); :};

SCOPE ::= PUBLIC 
		| PRIVATE 
		| PROTECTED;

TIPO_RETORNO ::= TIPO
			   | VOID;

FUNCAO ::= SCOPE TIPO_RETORNO ID AP LISTA_VAR FP ABRE_BLOCO BLOCO RETORNO FC;

CALL_FUNC ::= ID AP PARAMETRO FP;

ESTRUTURA ::= SELECAO:selecao {: RESULT = selecao; :};

SELECAO ::= IF AP EXPRESSAO FP ABRE_BLOCO BLOCO FC;

ATRIBUICAO ::= VAR:var ATT:opAtt EXPRESSAO:exp     {: RESULT = new Atribuicao(var.getId(), opAtt, exp); getTb().atribuiValor(RESULT); :}
		| IDENTIFICADOR:id ATT:opAtt EXPRESSAO:exp {: RESULT = new Atribuicao(id, opAtt, exp); getTb().atribuiValor(RESULT); :};

ABRE_BLOCO ::= AC {: getTb().novoEscopo(); :};

BLOCO ::= VAR:var PONTO_VIRGULA BLOCO:b 			{: RESULT = new Bloco(); RESULT.addLinha(var); 		RESULT.addLinhasBloco(b); :}
		| ATRIBUICAO:att PONTO_VIRGULA BLOCO:b 		{: RESULT = new Bloco(); RESULT.addLinha(att);		RESULT.addLinhasBloco(b); :}
		| EXPRESSAO:exp PONTO_VIRGULA BLOCO:b 		{: RESULT = new Bloco(); RESULT.addLinha(exp); 		RESULT.addLinhasBloco(b); :}
		| CALL_FUNC:callFunc PONTO_VIRGULA BLOCO:b 	{: RESULT = new Bloco(); RESULT.addLinha(callFunc); RESULT.addLinhasBloco(b); :}
		| FUNCAO:func BLOCO:b 						{: RESULT = new Bloco(); RESULT.addLinha(func); 	RESULT.addLinhasBloco(b); :}
		| ESTRUTURA:est BLOCO:b 					{: RESULT = new Bloco(); RESULT.addLinha(est); 	    RESULT.addLinhasBloco(b); :}
		| {: getTb().fimEscopo(); :};

RETORNO ::= RETURN EXPRESSAO PONTO_VIRGULA
		  | RETURN CALL_FUNC PONTO_VIRGULA
		  | ;