
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador;

import java.io.*;
import java_cup.runtime.*;
import compilador.Lexico;
import objetos.*;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\003\012\000\002\002\004\000\002\002" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\005\005\000\002\005\003\000" +
    "\002\005\002\000\002\006\004\000\002\007\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\012\003\000\002\012\005\000\002\012\002\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\025\003\000\002\025" +
    "\003\000\002\017\014\000\002\020\006\000\002\021\003" +
    "\000\002\022\011\000\002\010\005\000\002\010\005\000" +
    "\002\023\003\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\024\002\000\002\026" +
    "\005\000\002\026\005\000\002\026\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\004\006\001\002\000\004\051\010\001" +
    "\002\000\004\002\007\001\002\000\004\051\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\022\011\001\002\000" +
    "\016\010\016\011\020\012\014\013\015\023\ufff8\031\ufff8" +
    "\001\002\000\006\023\ufff9\031\ufff9\001\002\000\006\023" +
    "\022\031\023\001\002\000\004\051\ufffb\001\002\000\004" +
    "\051\ufffe\001\002\000\004\051\ufffc\001\002\000\004\051" +
    "\021\001\002\000\004\051\ufffd\001\002\000\012\023\ufff7" +
    "\027\ufff7\031\ufff7\037\ufff7\001\002\000\004\024\025\001" +
    "\002\000\012\010\016\011\020\012\014\013\015\001\002" +
    "\000\006\023\ufffa\031\ufffa\001\002\000\034\005\027\006" +
    "\026\007\037\010\016\011\020\012\014\013\015\014\041" +
    "\025\uffcc\046\033\051\030\052\040\053\034\001\002\000" +
    "\036\023\ufff4\027\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\047" +
    "\ufff4\050\ufff4\001\002\000\004\022\104\001\002\000\040" +
    "\023\ufff6\027\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\047\ufff6\050\ufff6\001\002\000\004\027\102\001\002\000" +
    "\034\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\025\uffd5\046\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\001\002\000\004\051\030\001\002\000\036\023\uffef" +
    "\027\uffef\033\uffef\034\uffef\035\uffef\036\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\047\uffef\050\uffef" +
    "\001\002\000\034\005\027\006\026\007\037\010\016\011" +
    "\020\012\014\013\015\014\041\025\uffcc\046\033\051\030" +
    "\052\040\053\034\001\002\000\004\027\076\001\002\000" +
    "\036\023\ufff3\027\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\047" +
    "\ufff3\050\ufff3\001\002\000\036\023\ufff0\027\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\001\002\000\036" +
    "\023\ufff5\027\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047\ufff5" +
    "\050\ufff5\001\002\000\036\027\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\037\074\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\050\ufff2\001\002\000\004\025" +
    "\073\001\002\000\006\027\067\037\070\001\002\000\036" +
    "\023\uffdf\027\uffdf\033\061\034\054\035\047\036\055\040" +
    "\056\041\051\042\046\043\052\044\053\045\057\047\062" +
    "\050\060\001\002\000\020\006\uffe7\007\uffe7\014\uffe7\046" +
    "\uffe7\051\uffe7\052\uffe7\053\uffe7\001\002\000\020\006\uffe9" +
    "\007\uffe9\014\uffe9\046\uffe9\051\uffe9\052\uffe9\053\uffe9\001" +
    "\002\000\020\006\026\007\037\014\041\046\033\051\030" +
    "\052\040\053\034\001\002\000\020\006\uffe2\007\uffe2\014" +
    "\uffe2\046\uffe2\051\uffe2\052\uffe2\053\uffe2\001\002\000\020" +
    "\006\uffe6\007\uffe6\014\uffe6\046\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\001\002\000\020\006\uffe5\007\uffe5\014\uffe5\046\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\001\002\000\020\006\uffea\007" +
    "\uffea\014\uffea\046\uffea\051\uffea\052\uffea\053\uffea\001\002" +
    "\000\020\006\uffe8\007\uffe8\014\uffe8\046\uffe8\051\uffe8\052" +
    "\uffe8\053\uffe8\001\002\000\020\006\uffe3\007\uffe3\014\uffe3" +
    "\046\uffe3\051\uffe3\052\uffe3\053\uffe3\001\002\000\020\006" +
    "\uffe4\007\uffe4\014\uffe4\046\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\001\002\000\020\006\uffe0\007\uffe0\014\uffe0\046\uffe0\051" +
    "\uffe0\052\uffe0\053\uffe0\001\002\000\020\006\uffeb\007\uffeb" +
    "\014\uffeb\046\uffeb\051\uffeb\052\uffeb\053\uffeb\001\002\000" +
    "\020\006\uffe1\007\uffe1\014\uffe1\046\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\001\002\000\020\006\026\007\037\014\041\046" +
    "\033\051\030\052\040\053\034\001\002\000\006\023\uffde" +
    "\027\uffde\001\002\000\036\023\ufff2\027\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\050\ufff2\001\002\000\006\023" +
    "\uffdd\027\uffdd\001\002\000\034\005\027\006\026\007\037" +
    "\010\016\011\020\012\014\013\015\014\041\025\uffcc\046" +
    "\033\051\030\052\040\053\034\001\002\000\020\006\026" +
    "\007\037\014\041\046\033\051\030\052\040\053\034\001" +
    "\002\000\004\027\uffd3\001\002\000\004\025\uffd0\001\002" +
    "\000\004\002\001\001\002\000\020\006\026\007\037\014" +
    "\041\046\033\051\030\052\040\053\034\001\002\000\004" +
    "\027\uffd2\001\002\000\034\005\027\006\026\007\037\010" +
    "\016\011\020\012\014\013\015\014\041\025\uffcc\046\033" +
    "\051\030\052\040\053\034\001\002\000\004\025\uffce\001" +
    "\002\000\004\025\uffcd\001\002\000\036\023\ufff1\027\ufff1" +
    "\033\ufff1\034\ufff1\035\ufff1\036\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\001\002" +
    "\000\034\005\027\006\026\007\037\010\016\011\020\012" +
    "\014\013\015\014\041\025\uffcc\046\033\051\030\052\040" +
    "\053\034\001\002\000\004\025\uffcf\001\002\000\020\006" +
    "\026\007\037\014\041\046\033\051\030\052\040\053\034" +
    "\001\002\000\004\023\106\001\002\000\004\024\110\001" +
    "\002\000\034\005\027\006\026\007\037\010\016\011\020" +
    "\012\014\013\015\014\041\025\uffcc\046\033\051\030\052" +
    "\040\053\034\001\002\000\034\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\025\uffd1\046" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\001\002\000\004\025\112" +
    "\001\002\000\034\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\025\uffd4\046\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\016\005\012\006\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\016\006\023\001\001\000\002\001\001\000\024\004" +
    "\016\006\043\007\041\010\030\011\044\015\035\021\034" +
    "\022\031\024\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\100\001\001\000\002\001\001\000\024\004" +
    "\016\006\043\007\041\010\030\011\044\015\035\021\034" +
    "\022\031\024\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\062\014" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\064\011\044\015\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\064" +
    "\011\044\015\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\016\006\043\007\041" +
    "\010\030\011\044\015\035\021\034\022\031\024\071\001" +
    "\001\000\010\007\064\011\044\015\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\064\011\044\015\074\001\001\000\002\001\001\000\024" +
    "\004\016\006\043\007\041\010\030\011\044\015\035\021" +
    "\034\022\031\024\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\016\006\043\007" +
    "\041\010\030\011\044\015\035\021\034\022\031\024\102" +
    "\001\001\000\002\001\001\000\010\007\064\011\044\015" +
    "\104\001\001\000\002\001\001\000\004\023\106\001\001" +
    "\000\024\004\016\006\043\007\041\010\030\011\044\015" +
    "\035\021\034\022\031\024\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TabelaSimbolos tb = new TabelaSimbolos();
    
    public void syntax_error(Symbol s){
        String strErro = "Erro de sintaxe. Linha: " + (s.right + 1) +
            " Coluna: " + s.left + ". Texto: \"" + s.value + "\"" + " \n Token Encontrado: " + sym.terminalNames[s.sym] + " state " + s.parse_state;
        
        report_error(strErro, null); 
    }
    
    public TabelaSimbolos getTb() {
    	return this.tb;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= PROGRAMA_ESCOPO ID AP LISTA_VAR FP AC BLOCO FC 
            {
              Programa RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location listaVarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location listaVarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ArrayList<Var> listaVar = (ArrayList<Var>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location abreChavexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location abreChavexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object abreChave = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location blocoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blocoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Bloco bloco = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fechaChavexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fechaChavexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object fechaChave = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	RESULT = new Programa(id, listaVar, bloco); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA_ESCOPO ::= PROGRAM 
            {
              Object RESULT =null;
		 getTb().novoEscopo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA_ESCOPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TIPO ::= STR 
            {
              Object RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPO ::= INT 
            {
              Object RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPO ::= FLT 
            {
              Object RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPO ::= BOL 
            {
              Object RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTA_VAR ::= LISTA_VAR VIRGULA VAR 
            {
              ArrayList<Var> RESULT =null;
		Location listaVarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location listaVarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<Var> listaVar = (ArrayList<Var>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 listaVar.add(var); RESULT = listaVar; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_VAR ::= VAR 
            {
              ArrayList<Var> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Var>(); RESULT.add(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_VAR ::= 
            {
              ArrayList<Var> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VAR ::= TIPO ID 
            {
              Var RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(id, tipo); getTb().novoSimbolo(id, tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IDENTIFICADOR ::= ID 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 getTb().verificaUsaSimbolo(id); RESULT = id; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TERMO ::= CSTRING 
            {
              Object RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TERMO ::= TRUE 
            {
              Object RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TERMO ::= FALSE 
            {
              Object RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TERMO ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TERMO ::= NAO IDENTIFICADOR 
            {
              Object RESULT =null;
		Location naoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location naoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object nao = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TERMO ::= CONST 
            {
              Object RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TERMO ::= FLUT 
            {
              Object RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = termo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PARAMETRO ::= TERMO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETRO ::= TERMO VIRGULA PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETRO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERADOR_ARIT ::= SOMA 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERADOR_ARIT ::= SUB 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERADOR_ARIT ::= MULT 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERADOR_ARIT ::= DIV 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERADOR_BOOL ::= MAIORQ 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERADOR_BOOL ::= MENORQ 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERADOR_BOOL ::= MAIORI 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADOR_BOOL ::= MENORI 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADOR_BOOL ::= IGUAL 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADOR_BOOL ::= DIF 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADOR_BOOL ::= E 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADOR_BOOL ::= OU 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = op; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESSAO ::= TERMO 
            {
              Expressao RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(termo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESSAO ::= TERMO OPERADOR_ARIT EXPRESSAO 
            {
              Expressao RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(termo, op, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESSAO ::= TERMO OPERADOR_BOOL EXPRESSAO 
            {
              Expressao RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(termo, op, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SCOPE ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCOPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SCOPE ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCOPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SCOPE ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCOPE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_RETORNO ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_RETORNO ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCAO ::= SCOPE TIPO_RETORNO ID AP LISTA_VAR FP ABRE_BLOCO BLOCO RETORNO FC 
            {
              Funcao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCAO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CALL_FUNC ::= ID AP PARAMETRO FP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNC",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUTURA ::= SELECAO 
            {
              Estrutura RESULT =null;
		Location selecaoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location selecaoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Estrutura selecao = (Estrutura)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = selecao; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUTURA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SELECAO ::= IF AP EXPRESSAO FP ABRE_BLOCO BLOCO FC 
            {
              Estrutura RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blocoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blocoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Bloco bloco = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Estrutura(exp, bloco); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECAO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ATRIBUICAO ::= VAR ATT EXPRESSAO 
            {
              Atribuicao RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opAttxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opAttxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object opAtt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Atribuicao(var.getId(), opAttxleft.getUnit(), exp); getTb().atribuiValor(RESULT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATRIBUICAO ::= IDENTIFICADOR ATT EXPRESSAO 
            {
              Atribuicao RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opAttxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opAttxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object opAtt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Atribuicao(id, opAttxleft.getUnit(), exp); getTb().atribuiValor(RESULT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ABRE_BLOCO ::= AC 
            {
              Object RESULT =null;
		Location acxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location acxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ac; getTb().novoEscopo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ABRE_BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOCO ::= VAR PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bloco(); RESULT.addLinha(var); 		RESULT.addLinhasBloco(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCO ::= ATRIBUICAO PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;
		Location attxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location attxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Atribuicao att = (Atribuicao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bloco(); RESULT.addLinha(att);		RESULT.addLinhasBloco(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCO ::= EXPRESSAO PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bloco(); RESULT.addLinha(exp); 		RESULT.addLinhasBloco(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCO ::= ESTRUTURA BLOCO 
            {
              Bloco RESULT =null;
		Location estxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location estxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Estrutura est = (Estrutura)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Bloco(); RESULT.addLinha(est); 	    RESULT.addLinhasBloco(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BLOCO ::= 
            {
              Bloco RESULT =null;
		 getTb().fimEscopo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNO ::= RETURN EXPRESSAO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETORNO ::= RETURN CALL_FUNC PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETORNO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
