
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador;

import java.io.*;
import java_cup.runtime.*;
import compilador.Lexico;
import objetos.*;
import java.util.ArrayList;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\003\012\000\002\002\004\000\002\002" +
    "\003\000\002\004\005\000\002\004\003\000\002\004\002" +
    "\000\002\005\004\000\002\006\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\003\000\002\011\005\000\002\011\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\024\003\000\002\024\003\000\002" +
    "\016\014\000\002\017\006\000\002\020\003\000\002\021" +
    "\011\000\002\007\005\000\002\007\005\000\002\022\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\004\000\002\023\004\000\002" +
    "\023\002\000\002\025\005\000\002\025\005\000\002\025" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\004\004\006\001\002\000\004\050\010\001" +
    "\002\000\004\002\007\001\002\000\004\050\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\021\011\001\002\000" +
    "\010\022\ufffc\030\ufffc\054\014\001\002\000\006\022\ufffd" +
    "\030\ufffd\001\002\000\006\022\016\030\017\001\002\000" +
    "\004\050\015\001\002\000\012\022\ufffb\026\ufffb\030\ufffb" +
    "\036\ufffb\001\002\000\004\023\021\001\002\000\004\054" +
    "\014\001\002\000\006\022\ufffe\030\ufffe\001\002\000\034" +
    "\005\024\006\023\010\042\015\026\016\022\017\032\024" +
    "\uffce\045\033\050\025\051\043\052\035\054\014\055\027" +
    "\001\002\000\006\014\uffdf\054\uffdf\001\002\000\040\022" +
    "\ufff9\026\ufff9\030\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\046" +
    "\ufff9\047\ufff9\001\002\000\004\021\141\001\002\000\040" +
    "\021\133\026\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\046\ufffa\047\ufffa\001\002\000\006\014\uffe0\054\uffe0\001" +
    "\002\000\040\022\ufff5\026\ufff5\030\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043" +
    "\ufff5\044\ufff5\046\ufff5\047\ufff5\001\002\000\004\026\131" +
    "\001\002\000\036\005\024\006\023\010\042\015\026\016" +
    "\022\017\032\020\uffce\024\uffce\045\033\050\025\051\043" +
    "\052\035\054\014\055\027\001\002\000\006\014\uffde\054" +
    "\uffde\001\002\000\004\050\066\001\002\000\036\005\uffd9" +
    "\006\uffd9\010\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\024" +
    "\uffd9\045\uffd9\050\uffd9\051\uffd9\052\uffd9\054\uffd9\055\uffd9" +
    "\001\002\000\040\022\ufff3\026\ufff3\030\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\044\ufff3\046\ufff3\047\ufff3\001\002\000\036\005" +
    "\024\006\023\010\042\015\026\016\022\017\032\020\uffce" +
    "\024\uffce\045\033\050\025\051\043\052\035\054\014\055" +
    "\027\001\002\000\006\014\107\054\106\001\002\000\004" +
    "\026\103\001\002\000\004\026\101\001\002\000\040\022" +
    "\ufff8\026\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8" +
    "\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\046" +
    "\ufff8\047\ufff8\001\002\000\040\022\ufff4\026\ufff4\030\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\043\ufff4\044\ufff4\046\ufff4\047\ufff4\001\002" +
    "\000\036\026\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036" +
    "\077\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\046\ufff7\047\ufff7\001\002\000\004\024\076\001\002\000" +
    "\006\026\072\036\073\001\002\000\036\022\uffe3\026\uffe3" +
    "\032\063\033\056\034\051\035\057\037\060\040\053\041" +
    "\050\042\054\043\055\044\062\046\065\047\061\001\002" +
    "\000\020\006\uffeb\010\uffeb\045\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\055\uffeb\001\002\000\020\006\uffed\010\uffed\045\uffed" +
    "\050\uffed\051\uffed\052\uffed\055\uffed\001\002\000\020\006" +
    "\023\010\042\045\033\050\066\051\043\052\035\055\027" +
    "\001\002\000\020\006\uffe6\010\uffe6\045\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\055\uffe6\001\002\000\020\006\uffea\010\uffea" +
    "\045\uffea\050\uffea\051\uffea\052\uffea\055\uffea\001\002\000" +
    "\020\006\uffe9\010\uffe9\045\uffe9\050\uffe9\051\uffe9\052\uffe9" +
    "\055\uffe9\001\002\000\020\006\uffee\010\uffee\045\uffee\050" +
    "\uffee\051\uffee\052\uffee\055\uffee\001\002\000\020\006\uffec" +
    "\010\uffec\045\uffec\050\uffec\051\uffec\052\uffec\055\uffec\001" +
    "\002\000\020\006\uffe7\010\uffe7\045\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\055\uffe7\001\002\000\020\006\uffe4\010\uffe4\045" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\055\uffe4\001\002\000\020" +
    "\006\uffe8\010\uffe8\045\uffe8\050\uffe8\051\uffe8\052\uffe8\055" +
    "\uffe8\001\002\000\020\006\uffef\010\uffef\045\uffef\050\uffef" +
    "\051\uffef\052\uffef\055\uffef\001\002\000\020\006\023\010" +
    "\042\045\033\050\066\051\043\052\035\055\027\001\002" +
    "\000\020\006\uffe5\010\uffe5\045\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\055\uffe5\001\002\000\040\022\ufffa\026\ufffa\030\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047\ufffa\001\002" +
    "\000\006\022\uffe2\026\uffe2\001\002\000\040\022\ufff7\026" +
    "\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\047" +
    "\ufff7\001\002\000\006\022\uffe1\026\uffe1\001\002\000\036" +
    "\005\024\006\023\010\042\015\026\016\022\017\032\020" +
    "\uffce\024\uffce\045\033\050\025\051\043\052\035\054\014" +
    "\055\027\001\002\000\020\006\023\010\042\045\033\050" +
    "\066\051\043\052\035\055\027\001\002\000\004\026\uffd7" +
    "\001\002\000\006\020\uffd4\024\uffd4\001\002\000\004\002" +
    "\001\001\002\000\020\006\023\010\042\045\033\050\066" +
    "\051\043\052\035\055\027\001\002\000\004\026\uffd6\001" +
    "\002\000\036\005\024\006\023\010\042\015\026\016\022" +
    "\017\032\020\uffce\024\uffce\045\033\050\025\051\043\052" +
    "\035\054\014\055\027\001\002\000\006\020\uffd2\024\uffd2" +
    "\001\002\000\036\005\024\006\023\010\042\015\026\016" +
    "\022\017\032\020\uffce\024\uffce\045\033\050\025\051\043" +
    "\052\035\054\014\055\027\001\002\000\006\020\uffd1\024" +
    "\uffd1\001\002\000\004\050\110\001\002\000\004\050\uffdd" +
    "\001\002\000\004\050\uffdc\001\002\000\004\021\111\001" +
    "\002\000\010\022\ufffc\030\ufffc\054\014\001\002\000\006" +
    "\022\113\030\017\001\002\000\004\023\115\001\002\000" +
    "\036\005\024\006\023\010\042\015\026\016\022\017\032" +
    "\020\uffce\024\uffce\045\033\050\025\051\043\052\035\054" +
    "\014\055\027\001\002\000\036\005\uffd5\006\uffd5\010\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\024\uffd5\045\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\054\uffd5\055\uffd5\001\002\000\006" +
    "\020\120\024\uffcb\001\002\000\004\024\125\001\002\000" +
    "\020\006\023\010\042\045\033\050\025\051\043\052\035" +
    "\055\027\001\002\000\004\026\124\001\002\000\004\026" +
    "\123\001\002\000\004\024\uffcd\001\002\000\004\024\uffcc" +
    "\001\002\000\036\005\uffdb\006\uffdb\010\uffdb\015\uffdb\016" +
    "\uffdb\017\uffdb\020\uffdb\024\uffdb\045\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\054\uffdb\055\uffdb\001\002\000\006\020\uffcf\024" +
    "\uffcf\001\002\000\040\022\ufff6\026\ufff6\030\ufff6\032\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\046\ufff6\047\ufff6\001\002\000\006" +
    "\020\uffd0\024\uffd0\001\002\000\036\005\024\006\023\010" +
    "\042\015\026\016\022\017\032\020\uffce\024\uffce\045\033" +
    "\050\025\051\043\052\035\054\014\055\027\001\002\000" +
    "\006\020\uffd3\024\uffd3\001\002\000\022\006\023\010\042" +
    "\022\ufff0\045\033\050\066\051\043\052\035\055\027\001" +
    "\002\000\006\022\ufff2\030\137\001\002\000\004\022\136" +
    "\001\002\000\004\026\uffda\001\002\000\022\006\023\010" +
    "\042\022\ufff0\045\033\050\066\051\043\052\035\055\027" +
    "\001\002\000\004\022\ufff1\001\002\000\020\006\023\010" +
    "\042\045\033\050\066\051\043\052\035\055\027\001\002" +
    "\000\004\022\143\001\002\000\004\023\115\001\002\000" +
    "\034\005\024\006\023\010\042\015\026\016\022\017\032" +
    "\024\uffce\045\033\050\025\051\043\052\035\054\014\055" +
    "\027\001\002\000\004\024\146\001\002\000\036\005\uffd8" +
    "\006\uffd8\010\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\024" +
    "\uffd8\045\uffd8\050\uffd8\051\uffd8\052\uffd8\054\uffd8\055\uffd8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\012\005\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\017\001\001\000" +
    "\002\001\001\000\030\005\045\006\043\007\027\010\046" +
    "\014\040\015\036\016\030\017\037\020\035\021\033\023" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\045\006\043\007\027" +
    "\010\046\014\040\015\036\016\030\017\037\020\035\021" +
    "\033\023\127\001\001\000\002\001\001\000\004\006\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\045\006\043\007\027\010\046\014\040\015\036\016\030" +
    "\017\037\020\035\021\033\023\125\001\001\000\004\024" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\063\013\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\067\010" +
    "\046\014\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\067\010\046\014\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\045\006\043\007" +
    "\027\010\046\014\040\015\036\016\030\017\037\020\035" +
    "\021\033\023\074\001\001\000\010\006\067\010\046\014" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\067\010\046\014\077\001\001\000" +
    "\002\001\001\000\030\005\045\006\043\007\027\010\046" +
    "\014\040\015\036\016\030\017\037\020\035\021\033\023" +
    "\101\001\001\000\002\001\001\000\030\005\045\006\043" +
    "\007\027\010\046\014\040\015\036\016\030\017\037\020" +
    "\035\021\033\023\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\111\005\011\001\001\000\002\001\001" +
    "\000\004\022\113\001\001\000\030\005\045\006\043\007" +
    "\027\010\046\014\040\015\036\016\030\017\037\020\035" +
    "\021\033\023\115\001\001\000\002\001\001\000\004\025" +
    "\116\001\001\000\002\001\001\000\012\006\067\010\046" +
    "\014\121\017\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\045\006\043\007\027\010\046\014\040\015\036" +
    "\016\030\017\037\020\035\021\033\023\131\001\001\000" +
    "\002\001\001\000\010\006\067\010\133\011\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\006\067\010\133\011\137\001\001\000\002\001\001" +
    "\000\010\006\067\010\046\014\141\001\001\000\002\001" +
    "\001\000\004\022\143\001\001\000\030\005\045\006\043" +
    "\007\027\010\046\014\040\015\036\016\030\017\037\020" +
    "\035\021\033\023\144\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private TabelaSimbolos tb = new TabelaSimbolos();
    
    public void syntax_error(Symbol s){
        String strErro = "Erro de sintaxe. Linha: " + (s.right + 1) +
            " Coluna: " + s.left + ". Texto: \"" + s.value + "\"" + " \n Token Encontrado: " + sym.terminalNames[s.sym] + " state " + s.parse_state;
        
        report_error(strErro, null); 
    }
    
    public TabelaSimbolos getTb() {
    	return this.tb;
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAMA ::= PROGRAMA_ESCOPO ID AP LISTA_VAR FP AC BLOCO FC 
            {
              Programa RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		Location listaVarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location listaVarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		ArrayList<Var> listaVar = (ArrayList<Var>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location blocoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location blocoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Bloco bloco = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	RESULT = new Programa(id, listaVar, bloco); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA_ESCOPO ::= PROGRAM 
            {
              Object RESULT =null;
		 getTb().novoEscopo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA_ESCOPO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_VAR ::= LISTA_VAR VIRGULA VAR 
            {
              ArrayList<Var> RESULT =null;
		Location listaVarxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location listaVarxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		ArrayList<Var> listaVar = (ArrayList<Var>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 listaVar.add(var); RESULT = listaVar; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTA_VAR ::= VAR 
            {
              ArrayList<Var> RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<Var>(); RESULT.add(v); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_VAR ::= 
            {
              ArrayList<Var> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VAR ::= TIPO ID 
            {
              Var RESULT =null;
		Location tipoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tipoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Var(tipo, id); getTb().novoSimbolo(id, tipo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAR",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // IDENTIFICADOR ::= ID 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 getTb().verificaUsaSimbolo(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TERMO ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TERMO ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TERMO ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TERMO ::= NAO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TERMO ::= CADEIA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TERMO ::= CONST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TERMO ::= FLUT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERMO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= TERMO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETRO ::= TERMO VIRGULA PARAMETRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PARAMETRO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADOR_ARIT ::= SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADOR_ARIT ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERADOR_ARIT ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERADOR_ARIT ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARIT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERADOR_BOOL ::= MAIORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERADOR_BOOL ::= MENORQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERADOR_BOOL ::= MAIORI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERADOR_BOOL ::= MENORI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERADOR_BOOL ::= IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERADOR_BOOL ::= DIF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERADOR_BOOL ::= E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADOR_BOOL ::= OU 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERADOR_BOOL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESSAO ::= TERMO 
            {
              Expressao RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(termo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESSAO ::= TERMO OPERADOR_ARIT EXPRESSAO 
            {
              Expressao RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(termo, op, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESSAO ::= TERMO OPERADOR_BOOL EXPRESSAO 
            {
              Expressao RESULT =null;
		Location termoxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location termoxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object termo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Expressao(termo, op, exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SCOPE ::= PUBLIC 
            {
              Escopo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCOPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SCOPE ::= PRIVATE 
            {
              Escopo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCOPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SCOPE ::= PROTECTED 
            {
              Escopo RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCOPE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_RETORNO ::= TIPO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_RETORNO ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO_RETORNO",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCAO ::= SCOPE TIPO_RETORNO ID AP LISTA_VAR FP ABRE_BLOCO BLOCO RETORNO FC 
            {
              Funcao RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCAO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CALL_FUNC ::= ID AP PARAMETRO FP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL_FUNC",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESTRUTURA ::= SELECAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESTRUTURA",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SELECAO ::= IF AP EXPRESSAO FP ABRE_BLOCO BLOCO FC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SELECAO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ATRIBUICAO ::= VAR ATT EXPRESSAO 
            {
              Atribuicao RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opAttxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opAttxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object opAtt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 getTb().atribuiValor(var.getId(), exp.getTermo()); //validar tipo com tipoxright e tipoxleft ou varxright varxright ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ATRIBUICAO ::= IDENTIFICADOR ATT EXPRESSAO 
            {
              Atribuicao RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opAttxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opAttxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object opAtt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location expxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location expxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Expressao exp = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 getTb().atribuiValor(id, exp.getTermo());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ABRE_BLOCO ::= AC 
            {
              Object RESULT =null;
		 getTb().novoEscopo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ABRE_BLOCO",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BLOCO ::= VAR PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BLOCO ::= ATRIBUICAO PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BLOCO ::= EXPRESSAO PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BLOCO ::= CALL_FUNC PONTO_VIRGULA BLOCO 
            {
              Bloco RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BLOCO ::= FUNCAO BLOCO 
            {
              Bloco RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCO ::= ESTRUTURA BLOCO 
            {
              Bloco RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCO ::= 
            {
              Bloco RESULT =null;
		 getTb().fimEscopo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCO",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RETORNO ::= RETURN EXPRESSAO PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RETORNO ::= RETURN CALL_FUNC PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETORNO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETORNO",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
